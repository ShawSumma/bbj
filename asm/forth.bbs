
.include "std/math.bbs"

retval:
    .raw 0
r0:
    .raw 0
r1:
    .raw 0
r2:
    .raw 0
r3:
    .raw 0
r4:
    .raw 0
r5:
    .raw 0
r6:
    .raw 0
r7:
    .raw 0

const_char_quote:
    .raw "'"
const_char_hash:
    .raw "#"
const_char_zero:
    .raw "0"
const_zero:
    .raw 0
const_cr:
    .raw 13
const_newline:
    .raw 10
const_space:
const_wordsize:
    .raw 32
const_wordsize_x2:
    .raw 32*2
const_wordsize_x3:
    .raw 32*3
const_wordsize_x4:
    .raw 32*4

stack:
    zeros 16
stack_ptr:
    .raw stack

rstack:
    zeros 16
rstack_ptr:
    zeros rstack_ptr

line:
    zeros 80
line_ptr:
    .raw 0
line_base:
    .raw line

not_found:
    .raw "not found: ", 0
not_found_ptr:
    .raw not_found

.macro error_number n
    jmp over
num:
    .raw n
msg:
    .raw "error #", 0
msg_ref:
    .raw msg
over:
    puts msg_ref
    putbits 8, num
    newline
.end

main:
    jmp read_line
read_line:
    copy line_ptr, line_base
read_line_loop:
    getchar r0
    if_eq r0, const_cr, read_line_end
    if_eq r0, const_newline, read_line_end
    store line_ptr, r0
    add line_ptr, line_ptr, const_wordsize
    jmp read_line_loop
read_line_end:
    store line_ptr, const_zero
    copy line_ptr, line_base
run_line:
    call lookup
    call_dyn retval
    jmp run_line

    .local words_ptr r0
    .local line_char r1
    .local line_ptr_last r2
    .local word_char r3
    .local words_next r4
lookup_after_skip:
    add line_ptr, line_ptr, const_wordsize
lookup:
    load line_char, line_ptr
    if_eq line_char, const_space, lookup_after_skip
    if_eq line_char, const_char_quote, push_char
    if_eq line_char, const_char_hash, push_num
    if_zero line_char, read_line
    set words_ptr, words
    copy line_ptr_last, line_ptr
    load line_char, line_ptr
    if_zero line_char, lookup_end_of_line
lookup_check_next_word:
    if_zero words_ptr, lookup_word_not_found
    load words_next, words_ptr
    add words_ptr, words_ptr, const_wordsize
    copy r6, words_ptr
lookup_check_char:
    load line_char, line_ptr
    load word_char, words_ptr
    add line_ptr, line_ptr, const_wordsize
    add words_ptr, words_ptr, const_wordsize
    if_eq line_char, const_space, lookup_want_stop
    if_eq line_char, const_zero, lookup_want_stop
    if_eq line_char, word_char, lookup_char_eq
lookup_char_not_eq:
    copy line_ptr, line_ptr_last
    copy words_ptr, words_next
    jmp lookup_check_next_word
lookup_want_stop:
    if_zero word_char, lookup_found
    jmp lookup_char_not_eq
lookup_char_eq:
    jmp lookup_check_char
lookup_found:
    copy retval, words_ptr
    ret
lookup_word_not_found:
    set r0, line_ptr_last
    set r1, line_ptr
lookup_end_of_line:
    set retval, 0
    ret
lookup_print_range:
    error_number 2
    hlt
lookup_err_invalid:
    error_number 3
    hlt

push_char:
    add line_ptr, line_ptr, const_wordsize
    load r0, line_ptr
    add line_ptr, line_ptr, const_wordsize
    add stack_ptr, stack_ptr, const_wordsize
    store stack_ptr, r0
    jmp lookup

    .local push_value r0
    .local line_char r1
    .local tmp r2
push_num:
    set push_value, 0
    add line_ptr, line_ptr, const_wordsize
push_num_loop:
    load line_char, line_ptr
    add line_ptr, line_ptr, const_wordsize
    if_eq line_char, const_space, push_num_done
    if_zero line_char, push_num_done
    shl tmp, push_value
    shl push_value, tmp
    shl push_value, push_value
    add push_value, push_value, tmp
    sub line_char, line_char, const_char_zero
    add push_value, push_value, line_char
    jmp push_num_loop
push_num_done:
    add stack_ptr, stack_ptr, const_wordsize
    store stack_ptr, r0
    jmp lookup

words_tail:
    .raw after_words_builtins

word_semicolon_ptr:
    .raw word_semicolon

words_helper_ret:
    set r0, 16
    putbits 8, r0
    newline 
    ret

words_helper_push:
    add stack_ptr, stack_ptr, const_wordsize
    store stack_ptr, r1
    set r1, 17
    putbits 8, r1
    space
    putbits 32, r0
    newline
    jmp_dyn r0

words:
word_0:
    .raw word_1
    .raw ";", 0
word_semicolon:
    sub rstack_ptr, rstack_ptr, const_wordsize
    ret

word_1:
    .raw word_2
    .raw ".", 0
word_1_code:
    load r0, stack_ptr
    putchar r0
    sub stack_ptr, stack_ptr, const_wordsize
    ret

word_2:
    .raw word_3
    .raw "exit", 0
    hlt

word_3:
    .raw word_4
    .raw "dup", 0
    load r0, stack_ptr
    add stack_ptr, stack_ptr, const_wordsize
    store stack_ptr, r0
    ret

word_4:
    .raw word_5
    .raw "+", 0
    load r0, stack_ptr
    sub stack_ptr, stack_ptr, const_wordsize
    load r1, stack_ptr
    add r0, r0, r1
    store stack_ptr, r0
    ret

word_5:
    .raw word_6
    .raw ":", 0
    .local line_char r0
    copy word_base, words_tail
    add words_tail, words_tail, const_wordsize
    jmp word_def_char_head
word_def_char_skip:
    add line_ptr, line_ptr, const_wordsize
word_def_char_head:
    load line_char, line_ptr
    if_eq line_char, const_space, word_def_char_skip
word_def_char:
    load line_char, line_ptr
    add line_ptr, line_ptr, const_wordsize
    if_eq line_char, const_space, word_def_char_done
    if_eq line_char, const_zero, word_def_char_done
    store words_tail, line_char
    add words_tail, words_tail, const_wordsize
    jmp word_def_char
word_def_char_done:
    store words_tail, const_zero
    add words_tail, words_tail, const_wordsize
word_def_read_body:
    copy word_def_stack_ptr, stack_ptr
    call lookup
    xor word_def_stack_ptr, word_def_stack_ptr, stack_ptr
    if_zero word_def_stack_ptr, word_def_found_word
word_def_found_push:
    load r0, stack_ptr
    sub stack_ptr, stack_ptr, const_wordsize
    words_add_set r0, 0
    copy r2, r0
    words_add_set r1, r0
    words_add_jmp words_helper_push
    store r2, words_tail
    jmp word_def_read_body
word_def_found_word:
    if_zero retval, word_def_error_eol
    if_eq retval, word_semicolon_ptr, word_def_write_ret
    # # call add_words
    jmp word_def_read_body
word_def_write_ret:
    words_add_ret
    store word_base, words_tail
    store words_tail, const_zero
    ret
word_def_error_eol:
    error_number 1
    hlt

word_base:
    .raw 0
word_def_stack_ptr:
    .raw 0
word_def_name_ptr:
    .raw 0

word_6:
after_words_builtins:
    zeros 10000

.macro call func
    store rstack_ptr, after_ref
    add rstack_ptr, rstack_ptr, const_wordsize
    jmp func
after_ref:
    .raw after
after:
.end

.macro call_dyn func_dyn
    store rstack_ptr, after_ref
    add rstack_ptr, rstack_ptr, const_wordsize
    jmp_dyn func_dyn
after_ref:
    .raw after
after:
.end

.macro ret
    sub rstack_ptr, rstack_ptr, const_wordsize
    load r1, rstack_ptr
    jmp_dyn r1
.end

.macro words_add_raw_const word
    words_add_raw_ref data
    jmp over
data:
    .raw word
over:
.end

.macro words_add_raw_ref word
    store words_tail, word
    add words_tail, words_tail, const_wordsize
.end

.macro words_add_ret
    words_add_raw_const 0
    words_add_raw_const 0
    words_add_raw_const words_helper_ret
.end

.macro words_add_set dest, num
    jmp over
tmp1:
    .raw 0
tmp2:
    .raw 0
over:
    words_add_raw_const 0
    words_add_raw_const 0
    add tmp1, words_tail, const_wordsize_x2
    words_add_raw_const tmp1
    copy tmp2, words_tail
    words_add_raw_const num
    sub r0, words_tail, const_wordsize
    words_add_copy dest, tmp2
.end

.macro words_add_copy dest, src
    .loop n, 32
        words_add_mov dest+n, src+n
    .end
.end

.macro words_add_mov dest, src
    jmp over
tmp1:
    .raw 0
over:
    words_add_raw_const src
    words_add_raw_const dest
    add tmp1, words_tail, const_wordsize
    words_add_raw_const tmp1
.end

.macro words_add_jmp const
    words_add_raw_const 0
    words_add_raw_const 0
    words_add_raw_const const
.end
